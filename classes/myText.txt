# Python Files

## Opening Files
To open local files, python includes a built-in function called `open`
It takes as parameters:
- The path to the file in disk (required)
- The mode to open the file (read, write, append and binary, text).
- The file´s encoding (If you don´t specify it, Python will choose a default encoding)

At filesystem level, files are merely a sequence of bytes. At Python language level, files are recognized between binary and text modes.

- Binary mode allows reading a file as a raw sequence of bytes (no decoding).
- Text mode allows reading a file as a `str` object (decoding). It also supports Python's **universal newlines**(Ex. Translation between '\n' to '\r\n').

## File Encoding
Getting the encoding right is **crucial** for correctly interpreting the contents of a text file.

Python can't reliably determine the encoding of a text file, and without knowing the encoding, it can't properly manipulate the file's content. That's why if the enconding isn't specified, Python uses the system's default encoding (Ex. UTF-8) but it can change from system to system.

## File Operations
### Writing
To open a file for writing operations, you pass **'wt'** as the `mode` argument (The 'w' is for 'write' and the 't' is for 'text').
`f = open('myText.txt', mode='wt', encoding='utf-8')`

**The first letter must be one of the following:**
```  
 r: Open file for reading. The stream is positioned at the beginning of the file. This is the default.
 
r+: Open for reading and writing. The stream is positioned at the beginning of the file.

 w: Truncate file to zero length or create file for writing. The stream is positioned at the beginning of the file.
 
w+: Open for reading and writing. The file is created if it does not exist, otherwise it is truncated. The stream is positioned at the beginning of the file.

a: Open for writing. The file is created if it does not exist. The stream is positioned at the end of the file. Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening seeks or similar.

a+: Open for reading and writing. The file is created if it does not exist. The stream is positioned at the end of the file. Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening seeks or similar.
```
**In any of the previous cases, they should be combined with:**
```
 t: File contents interpreted as encoded text strings. The bytes in the file will be encoded and decoded according the to the specified text encoding, and universal newline translation will be in effect (unless explicitly disabled). All methods which write and read data from the file accept and return str objects. This is the default.
 
 b: File contents are treated as raw bytes. All methods which write and read data from the file accept and return bytes objects.
``` 

To write content to the file, you use the `write()` method on the file instance you just opened.

`f.write('Sample text for myText.txt file\n')` <- The '\n' is required since Python does not provide a ''newLine'' method.

Once you're done writing to the file, you close it by calling `close()`. It's only after closing the file that its changes become visible to external processes.

`f.close()`

texto para escribirtexto para escribirtexto para escribir